-- 집합

-- 결과 6개 행
SELECT * FROM EMP
WHERE DEPTNO = 30;

-- 결과 3개 행
SELECT * FROM EMP
WHERE DEPTNO = 10;

-- EMP 테이블에서 DEPTNO가 30 또는 10인 데이터를 조회
-- 두 테이블을 UNION(합집합)으로 연결한다
SELECT * FROM EMP
WHERE DEPTNO = 30
UNION ALL
SELECT * FROM EMP
WHERE DEPTNO = 10;

-- EMP 테이블에서 SAL 1000이상 2000이하, 1500이상 3000이하의 결과를 같이 조회
SELECT *
FROM EMP
WHERE SAL BETWEEN 1000 AND 2000
UNION ALL
SELECT *
FROM EMP
WHERE SAL BETWEEN 1500 AND 3000;

SELECT *
FROM EMP
WHERE (SAL BETWEEN 1500 AND 3000) AND (SAL BETWEEN 1000 AND 2000);


SELECT * FROM EMP;
SELECT * FROM DEPT;

-- 오류 : 열의 수가 다르면 UNION을 사용할 수 없다.
SELECT * FROM EMP
UNION
SELECT * FROM DEPT;

-- 오류 : 열의 타입이 다르면 UNION을 사용할 수 없다.
SELECT EMPNO, DEPTNO, JOB
UNION
SELECT * FROM DEPT;

--
SELECT SAL, ENAME, JOB FROM EMP
UNION
SELECT * FROM DEPT;

-- 열의 수와 타입이 일치한다면 UNION이 가능하다
SELECT SAL, ENAME, JOB FROM EMP
UNION
SELECT DEPTNO, DNAME, LOC FROM DEPT;

-- 위쪽 쿼리에 별칭을 주면 결과 테이블의 열 이름으로 사용된다.
SELECT DEPTNO 숫자, DNAME 문자, LOC 문자 FROM DEPT E
UNION
SELECT SAL, ENAME, JOB FROM EMP D;
ORDER BY 번호;

-- UNION이 두 테이블 합치고 ORDER BY가 실행되므로
-- 합쳐지기 이전의 컬럼명이나 소속을 이용해도 정렬되지 않는다.
SELECT DEPTNO, ENAME 이름, JOB 직장 FROM EMP E
UNION
SELECT * FROM DEPT D
ORDER BY 이름; -- <- UNION 이라는 것을 사용하면 무조건 별칭이나 최종 결과에 붙는 것으로 정렬을 해야한다. ★★★★★

-- 교집합
SELECT * FROM PLAYER;

SELECT PLAYER_NAME 이름, TEAM_ID 팀, HEIGHT 키, WEIGHT 몸무게
FROM PLAYER p 
WHERE HEIGHT BETWEEN 185 AND 186
INTERSECT 
SELECT PLAYER_NAME 이름, TEAM_ID 팀, HEIGHT 키, WEIGHT 몸무게
FROM PLAYER p2 
WHERE WEIGHT BETWEEN 76 AND 78;


--차집합
SELECT PLAYER_NAME 이름, TEAM_ID 팀, HEIGHT 키, WEIGHT 몸무게
FROM PLAYER p 
WHERE HEIGHT BETWEEN 185 AND 186
MINUS 
SELECT PLAYER_NAME 이름, TEAM_ID 팀, HEIGHT 키, WEIGHT 몸무게
FROM PLAYER p2 
WHERE WEIGHT BETWEEN 76 AND 78;


-- 형 변환 함수
-- TO_CHAR()
SELECT SYSDATE FROM DUAL;

SELECT TO_CHAR(SYSDATE, 'YYYY/MM/DD') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'YYYY"년" MM"월 "DD"일"') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'YYYY/MM/DD-HH24:MI') FROM DUAL;

-- TO_NUMBER()
SELECT '1234', TO_NUMBER('1234') FROM DUAL;

SELECT '123' + '456' FROM DUAL;

-- TO_DATE()
SELECT TO_DATE('2300-12-25-13:22:59', 'YYYY-MM-DD-HH24:MI:SS') FROM DUAL;


-- view
-- 회원정보와 대여정보를 조합

CREATE VIEW MEMRENTAL AS
SELECT M.MEM_ID, M.MEM_NAME, R.REN_ID, R.BOOK_ID, R.REN_RENTALDATE, R.REN_RETURNDATE
FROM TBL_MEMBER M
	JOIN TBL_RENTAL R
	ON M.MEM_ID = R.MEM_ID;

-- VIEW 생성
SELECT * FROM MEMRENTAL;

SELECT SYSDATE FROM DUAL;

CREATE VIEW VIEW_PLAYER AS 
SELECT PLAYER_NAME 이름, TO_CHAR(TRUNC(BIRTH_DATE), 'YYYY-MM-DD') 생일, ROUND((SYSDATE - BIRTH_DATE) / 365, 0) AS 나이
FROM PLAYER p ;
--TRUNC 함수 : TRUNC(date, [, format]) : 날짜값에서 시간정보(HH:MI:SS)를 제거하고 날짜만 반환됨

SELECT SYSDATE, TRUNC(SYSDATE, 'YYYY') FROM DUAL;
SELECT SYSDATE, TO_CHAR(SYSDATE, 'YYYY-MM-DD') FROM DUAL;


CREATE VIEW VIEW_PLAYER AS
SELECT P.*, ROUND((SYSDATE-BIRTH_DATE)/365, 0) AS 나이
FROM PLAYER P;

SELECT * FROM VIEW_PLAYER;

SELECT 이름, 나이 + 1 FROM VIEW_PLAYER;

DROP VIEW VIEW_PLAYER;


DELETE FROM MEMRENTAL m
WHERE MEM_NAME = '맹구';

SELECT * FROM TBL_MEMBER;

--EMPLOYEES 테이블에서 사원이름과 그 매니저 이름이 있는 VIEW 만들기

--SELF JOIN
CREATE VIEW view_employees AS
SELECT E1.EMPLOYEE_ID, E1.FIRST_NAME || ' ' || E1.LAST_NAME 사원이름, E2.FIRST_NAME || ' '|| E2.LAST_NAME 매니저이름, E1.MANAGER_ID, E2.EMPLOYEE_ID,
		E1.JOB_ID, E1.DEPARTMENT_ID
FROM EMPLOYEES E1 
	JOIN EMPLOYEES E2
	ON E1.MANAGER_ID = E2.EMPLOYEE_ID;

CREATE VIEW view_employees AS
SELECT e1.employee_id, e1.FIRST_NAME || ' ' || e1.LAST_NAME 사원이름, 
   e2.MANAGER_ID, e2.FIRST_NAME || ' ' || e2.LAST_NAME 매니저이름,
   e1.job_id, e1.department_id
FROM EMPLOYEES e1 JOIN EMPLOYEES e2
ON E1.MANAGER_ID = E2.EMPLOYEE_ID;

--E1 : 사원테이블, E2 : 매니저테이블
-- ON 사원의 매니저ID = 매니저의 ID가 같으면. OK



-- view_employees의 department_id를 이용해서 deparment_name이 나오는지 확인하기
SELECT VE.EMPLOYEE_ID, VE.사원이름, D.DEPARTMENT_ID, D.DEPARTMENT_NAME
FROM VIEW_EMPLOYEES VE
	JOIN DEPARTMENTS D
	ON VE.DEPARTMENT_ID = D.DEPARTMENT_ID;

--PK 설정된 것 확인 쿼리문
SELECT COLS.TABLE_NAME, COLS.COLUMN_NAME, CONS.CONSTRAINT_NAME
FROM ALL_CONSTRAINTS CONS
JOIN ALL_CONS_COLUMNS COLS
ON CONS.CONSTRAINT_NAME = COLS.CONSTRAINT_NAME
WHERE CONS.CONSTRAINT_TYPE = 'P' -- P : PRIMARY KEY, R : REFERENCES . . . . . . . . . . . .
AND COLS.TABLE_NAME = 'EMPLOYEES';


SELECT * FROM user_tab_privs_recd;



SELECT * FROM TBL_BOOK;
INSERT INTO TBL_BOOK
--VALUES(11, 'COMMIT', 'TCL');
VALUES(12, 'ROLLBACK', 'TCL');

DELETE FROM TBL_RENTAL  CONSTRAINTS;


SELECT * FROM TBL_RENTAL; 

DELETE FROM TBL_RENTAL tr 
WHERE REN_ID = 4;


COMMIT;
ROLLBACK;

TRUNCATE TABLE TBL_RENTAL; -- 롤백 불가능

SELECT * FROM EMPLOYEES;

SELECT FIRST_NAME, SALARY, 
	CASE 
			WHEN SALARY >= 5000 THEN '높음'
			WHEN SALARY >= 3000 THEN '중간'
			ELSE '낮음'
	END
FROM EMPLOYEES;


-- 내부조인

--
CREATE TABLE TBL_BOOK(
	BOOK_ID NUMBER,
	BOOK_TITLE VARCHAR2(1000),
	BOOK_AUTHOR VARCHAR2(100),
	CONSTRAINT BOOK_PK PRIMARY KEY(BOOK_ID)
);

SELECT * FROM TBL_BOOK;

CREATE TABLE TBL_BOOKPRICE(
	BP_ID NUMBER,
	BP_PRICE NUMBER,
	CONSTRAINT BP_PK PRIMARY KEY(BP_ID)
);

SELECT * FROM TBL_BOOKPRICE;


-- 값 추가
INSERT INTO TBL_BOOK
--VALUES(1, '위대한 개츠비', 'F.스콧');
--VALUES(2, '해리포터', 'J.K. 롤링');
--VALUES(3, '1984', '조지오웰');
--VALUES(4, '오만과 편견', '제인 오스틴');
--VALUES(5, '데미안', '헤르만 헤세');
--VALUES(6, '모모', '미하엘 엔더');
VALUES(7, 'DBMS', 'DBMS');

SELECT * FROM TBL_BOOK;


INSERT INTO TBL_BOOKPRICE
--VALUES(1, 15000);
--VALUES(2, 18000);
--VALUES(3, 14000);
--VALUES(4, 17000);
--VALUES(5, 18000);
--VALUES(6, 20000);
VALUES(7, 21000);

-- 2개의 테이블 내부조인
SELECT A.BOOK_ID, A.BOOK_TITLE, A.BOOK_AUTHOR, B.BP_ID, B.BP_PRICE
FROM TBL_BOOK A
	INNER JOIN TBL_BOOKPRICE B
	ON A.BOOK_ID = B.BP_ID;
--WHERE B.BP_PRICE >= 18000

-- 도서관
-- 도서테이블, 회원테이블, 렌탈테이블
DROP TABLE TBL_BOOK;
DROP TABLE TBL_BOOKPRICE;


CREATE TABLE TBL_BOOK(
	BOOK_ID NUMBER,
	BOOK_TITLE VARCHAR2(1000),
	BOOK_AUTHOR VARCHAR2(100),
	CONSTRAINT BOOK_PK PRIMARY KEY(BOOK_ID)
);

SELECT * FROM TBL_BOOK;


CREATE TABLE TBL_MEMBER(
	MEM_ID NUMBER,
	MEM_NAME VARCHAR2(100),
	MEM_PHONE VARCHAR2(100),
	MEM_EMAIL VARCHAR2(100),
	CONSTRAINT PK_MEMBER PRIMARY KEY(MEM_ID)
);

SELECT * FROM TBL_MEMBER;

CREATE TABLE TBL_RENTAL(
	REN_ID NUMBER,
	MEM_ID NUMBER,
	BOOK_ID NUMBER,
	REN_RENTALDATE DATE,
	REN_RETURNDATE DATE,
	CONSTRAINT PK_RENTAL PRIMARY KEY(REN_ID),
	CONSTRAINT FK_RENTAL_MEM FOREIGN KEY(MEM_ID) REFERENCES TBL_MEMBER(MEM_ID),
	CONSTRAINT FK_RENTAL_BOOK FOREIGN KEY(BOOK_ID) REFERENCES TBL_BOOK(BOOK_ID)
);

SELECT * FROM TBL_RENTAL;


-- 값 추가
INSERT INTO TBL_BOOK
--VALUES(1, '위대한 개츠비', 'F.스콧');
--VALUES(2, '해리포터', 'J.K. 롤링');
--VALUES(3, '1984', '조지오웰');
--VALUES(4, '오만과 편견', '제인 오스틴');
VALUES(5, '데미안', '헤르만 헤세');

INSERT INTO TBL_MEMBER
VALUES
--(1, '짱구', '123-456-7890', 'aaa@koreait.com');
--(2, '유리', '987-654-3210', 'bbb@koreait.com');
--(3, '철수', '555-123-4567', 'ccc@koreait.com');
--(4, '훈이', '777-888-9999', 'ddd@koreait.com');
(5, '맹구', '555-777-3333', 'eee@koreait.com');

INSERT INTO TBL_RENTAL
VALUES
--(1, 1, 3, TO_DATE('2023-12-11', 'YYYY-MM-DD'), TO_DATE('2023-12-18', 'YYYY-MM-DD'));
--(2, 2, 1, TO_DATE('2023-12-11', 'YYYY-MM-DD'), TO_DATE('2023-12-18', 'YYYY-MM-DD'));
--(3, 3, 2, TO_DATE('2023-12-13', 'YYYY-MM-DD'), TO_DATE('2023-12-20', 'YYYY-MM-DD'));
--(4, 4, 4, TO_DATE('2023-12-20', 'YYYY-MM-DD'), TO_DATE('2023-12-27', 'YYYY-MM-DD'));
(5, 5, 5, TO_DATE('2023-12-22', 'YYYY-MM-DD'), TO_DATE('2023-12-29', 'YYYY-MM-DD'));


SELECT * FROM TBL_BOOK;
SELECT * FROM TBL_MEMBER;
SELECT * FROM TBL_RENTAL;

-- 등가 조인 : 두 개 이상의 테이블을 조인할 때, 특정 컬럼들의 값이 서로 같은 행만 결과로 반환



-- 대여 정보와 책의 저자를 가져오기
-- 행의 개수를 먼저 파악하여 선행 테이블, 후행 테이블 설정
SELECT COUNT(*) FROM TBL_BOOK;
SELECT COUNT(*) FROM TBL_RENTAL;

SELECT * FROM TBL_RENTAL;
SELECT * FROM TBL_BOOK;
SELECT * FROM TBL_MEMBER;

SELECT R.REN_ID, R.MEM_ID, R.BOOK_ID, R.REN_RENTALDATE, R.REN_RETURNDATE
FROM TBL_RENTAL R
	INNER JOIN TBL_BOOK B
	ON R.BOOK_ID = B.BOOK_ID;

-- 대여한 책이름과 반납날짜
SELECT B.BOOK_TITLE, R.REN_RETURNDATE
FROM TBL_BOOK B
	INNER JOIN TBL_RENTAL R
	ON B.BOOK_ID = R.BOOK_ID;

-- 대여한 책이름과 반납날짜
SELECT B.*, R.*
FROM TBL_BOOK B
	INNER JOIN TBL_RENTAL R
	ON B.BOOK_ID = R.BOOK_ID;

-- 회원의 이름(MBMBER_ID)과 대여한 책의 제목(BOOK_TITLE)을 가져오는 등가조인 -> 둘이 겹치는 컬럼이 없음!
--SELECT TB.BOOK_TITLE, TM.MEMBER_ID
--FROM TBL_BOOK TB
--	JOIN TBL_MEMBER TM
--	ON TB.BOOK_ID  = TM.MEM_ID ;    <- 출력은 되지만 1번이 3번책을 빌려간 것에 대해서는 제대로 나오지 않음

-- 등가조인 2개 이상할 때는 가장 많이 겹쳐있는 놈을 메인으로 두는 것이 편하다. <렌탈 테이블>
SELECT TB.BOOK_ID, TB.BOOK_TITLE, TM.MEM_ID, TM.MEM_NAME
FROM TBL_RENTAL TR
	JOIN TBL_MEMBER TM
	ON TR.MEM_ID = TM.MEM_ID
	JOIN TBL_BOOK TB
	ON TR.BOOK_ID = TB.BOOK_ID;


-- 비등가조인 : 두 테이블 간의 조건이 같음이 아닌 범위 조건 등을 사용하는 방식

-- 책 대여일-반납일 사이에 특정 날짜가 포함되어있는지 확인
SELECT TM.MEM_NAME, TB.BOOK_TITLE, TR.REN_RENTALDATE, TR.REN_RETURNDATE
FROM TBL_RENTAL TR
	JOIN TBL_BOOK TB 
	ON TB.BOOK_ID = TR.BOOK_ID
	JOIN TBL_MEMBER TM
	ON TM.MEM_ID = TR.MEM_ID
WHERE TO_DATE('2023-12-25', 'YYYY-MM-DD') BETWEEN TR.REN_RENTALDATE AND TR.REN_RETURNDATE; -- <- 곱 씨ㅃ어볼만한 조건식임


-- 대여기간에 따라 책의 대여 상태
-- 3일 이하 단기대여, 7일 이상 장기대여
SELECT TB.BOOK_TITLE, TM.MEM_NAME, TR.REN_RENTALDATE, TR.REN_RETURNDATE,
	CASE
		WHEN REN_RETURNDATE - REN_RENTALDATE <= 7 THEN '단기대여'
		ELSE '장기대여'
	END	AS RENTAL_TYPE
FROM TBL_RENTAL TR
	JOIN TBL_BOOK TB
	ON TB.BOOK_ID = TR.BOOK_ID
	JOIN TBL_MEMBER TM
	ON TM.MEM_ID = TR.MEM_ID;

SELECT * FROM TBL_RENTAL;
SELECT * FROM TBL_BOOK;
SELECT * FROM TBL_MEMBER;


-- SQL 실행순서
-- FROM -> ON -> JOIN -> WHERE -> GROUP BY -> HAVING -> SELECT -> ORDER BY
-- FROM : 테이블이나 뷰의 데이터 가져오기
-- ON : JOIN절의 조건 평가
-- JOIN : 지정된 조건에 따라 두 개 이상의 테이블을 조인
-- WHERE : 조인 결과에서 조건에 맞는 행을 필터링
-- GROUP BY : 데이터 그룹화(집계함수와 주로 사용)
-- HAVING : GROUP BY로 그룹화된 데이터에 대해 조건 적용
-- SELECT : 조회할 컬럼을 선택(집계함수, 별칭 가능)
-- ORDER BY : 최종 결과를 정렬(ASC, DESC) GROUP BY 쓰면 그것으로만 정렬가능!?



INSERT INTO TBL_BOOKPRICE
--VALUES(1, 15000);
--VALUES(2, 18000);
--VALUES(3, 14000);
VALUES(4, 17000);

SELECT * FROM TBL_BOOKPRICE;

--LEFT OUTER JOIN
-- BOOK 테이블 기준 왼쪽 외부조인을 수행하고, BOOKPRICE 테이블의 데이터를 포함
SELECT TB.BOOK_ID, TB.BOOK_TITLE, TB.BOOK_AUTHOR, TP.BP_ID, TP.BP_PRICE
FROM TBL_BOOK TB 
	LEFT JOIN TBL_BOOKPRICE TP
	ON TB.BOOK_ID = TP.BP_ID;

-- RIGHT OUTER JOIN
-- BOOKPRIE 기준으로 오른쪽 외부조인을 수행하고 BOOK테이블의 데이터를 포함
INSERT INTO TBL_BOOK
VALUES(10, 'DBMS', 'DB');

INSERT INTO TBL_BOOKPRICE
VALUES(7, 20000);

SELECT TB.BOOK_ID, TB.BOOK_TITLE, TB.BOOK_AUTHOR, TP.BP_ID, TP.BP_PRICE
FROM TBL_BOOK TB 
	RIGHT JOIN TBL_BOOKPRICE TP
	ON TB.BOOK_ID = TP.BP_ID;

SELECT TB.BOOK_ID, TB.BOOK_TITLE, TB.BOOK_AUTHOR, TP.BP_ID, TP.BP_PRICE
FROM TBL_BOOK TB
	FULL OUTER JOIN TBL_BOOKPRICE TP
	ON TB.BOOK_ID = TP.BP_ID;



